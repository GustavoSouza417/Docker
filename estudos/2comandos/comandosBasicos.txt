docker version
  Retorna a versão do Docker, como também outras informações
  É útil para saber se ele está funcionando e se ele é um
  docker client ou server


docker info
  Retorna quantos contêiners você tem e informações sobre eles,
  como também informações sobre suas imagens, plugins e afins


docker --help
  Retorna informações sobre todos os comandos do Docker
  Pode ser executado dentro de comandos para exibir informações
  sobre sub-comandos






docker container run -p 8080:80 nginx
  Roda o container docker "nginx"
  O comando "run" serve para criar contêiners e iniciá-los após sua criação
  O host acessará o serviço por sua porta 8080 (poderia ser qualquer outra porta vazia)
  O nginx executará na porta 80 por padrão, então ali deve ser 80
  No caso, a porta 8080 do host está sendo mapeada para a porta 80 do nginx
  Então, toda vez que o host acessar a sua porta 8080, ele será redirecionado para
  A porta 80 do nginx
  Se você quiser que o nginx execute em outra porta, você precisa reconfigurá-lo


docker container run -d -p 8080:80 nginx
  Roda o contêiner docker "nginx" na porta 8080 em segundo plano


docker container run -P nginx
  Roda o contêiner docker "nginx" numa porta randômica


docker container run -d -p 80:80 --name AlgumNomeParaContainer nginx
  Você pode dar nomes a contêiners e, assim, consegue selecionar
  contêiners diretamente pelo nome, sem ter que usar o ID


docker container run --name container1 -d --network host -p 8080:80 nginx:alpine
  Atribui a rede "host" para o contêiner  
  Já que é uma rede host, o host e o contêiner precisam ter
  portas distintas (80:80 não funcioanaria)
  Novos contêiners também não podem ocupar nem a porta 8080 e nem 80
  depois dessa instância


docker container rename <Nome Atual> <Novo Nome>
  Renomeia um contêiner





docker container run (...)
  Executa e cria um contêiner a partir de uma imagem
  Se você não tiver a imagem, ele a baixa automaticamente


docker container start <ID do Contêiner || Nome do Contêiner>
  Executa um contêiner que já foi criado e não está executando


docker container stop <ID do Contêiner || Nome do Contêiner>
  Para a execução do container
  Demora alguns segundos, mas salva tudo do contêiner, sem que
  dados sejam perdidos


docker container kill <ID do Contêiner || Nome do Contêiner>
  Diferente do stop, para o contêiner imediatamente,
  mas perde todos os dados


docker container pause <ID do Contêiner || Nome do Contêiner>
  Pausa o contêiner, mantendo seu estado atual congelado


docker container unpause <ID do Contêiner || Nome do Contêiner>
  Despausa o contêiner pausado (pause), de forma que ele
  volte a executar no mesmo estado em que estava


docker container restart <ID do Contêiner || Nome do Contêiner>
  Reinicia um contêiner






docker container ls
  Lista todos os contêiners que estão em funcionamento


docker container ls -a
  Lista todos os contêiners, tanto os em funcionamento
  quanto os que estão parados


docker container ls -a -q
  Retorna "apenas o ID" de todos os contêiners


docker network ls
  Retorna as redes que você possui






docker container rm <ID do Container || Nome do Container>
  Exclui um contêiner que não está em execução
  Para excluir contêiners em execução, é preciso pará-los primeiro
  Você pode excluir vários contêiners de uma vez passando-os
  em sequência


docker container rm -f <ID do Container || Nome do Container>
  Força a remoção de um contêiner, mesmo que esteja em execução


docker container rm -f $(docker container ls -a -q)
  Exclui todos os contêiners de uma vez só, tanto os que estão
  em funcionamento quanto os que estão parados


docker network rm <ID da Rede || Nome da Rede>
  Exclui uma rede


docker network prune
  Apaga todas as redes que não estão em modo de execução
  Não apaga as redes padrão (bridge, host e none)






docker container logs <ID do Contêiner || Nome do Contêiner>
  Exibe as mensagens de log de determinado container
  Se você nunca acessou o contêiner, ele não retornará logs


docker container top <ID do Contêiner || Nome do Contêiner>
  Mostra quais processos (PID) o contêiner está executando
  no sistema operativo






docker container inspect <ID do Contêiner || Nome do Contêiner>
  Retorna informações detalhadas sobre quais redes estão sendo
  utilizadas por determinado contêiner

docker network inspect <ID da Rede || Nome da Rede>
  Retorna informações detalhadas sobre uma determinada rede






docker container stats
  Exibe como está o uso de recursos do computador em relação
  a todos os contêiners


docker container stats <ID do Contêiner || Nome do Contêiner>
  Exibe o uso de recursos do computador em relação ao contêiner
  passado como argumento






docker network create <Nome da Rede>
  Cria uma rede customizada. Por padrão, ela vem configurada
  com o driver bridge, pois os drivers null e host só podem
  ter uma única instância, que já vem instânciadas por padrão
  no Docker


docker network create <Nome da Rede> -d bridge
  Se você quiser deixar o driver explícito, pode fazer isso,
  mas por padrão, ele sempre cria com bridge e não é possível
  criar com os tipos host ou null.


docker network create <Nome da Rede> --subnet <Subnet (exemplo: 192.150.10.0/24)>
  Cria uma rede customizada em determinado range de IP


docker network create <Nome da Rede) --subnet <Subnet> --gateway <IP do gateway>
  Cria uma rede customizada em determinado range de IP e define
  o IP do gateway dela


docker container exec -it <Nome do Container> ping <endereço IP || DNS>
  Pinga em algum endereço
  É possível fazer isso tanto pelo IP quanto pelo nome do container (DNS)






docker image pull <Nome do Autor>/<Nome da Imagem>:<Tag>
  Para imagens oficiais, não é necessário colocar o nome do autor
  Após o nome da imagem, se quiser, você pode atribuir a Tag,
  que define a versão ou afins da imagem


docker image commit <ID do Contêiner || Nome do Contêiner>
  Cria uma imagem a partir de um contêiner


docker image history <ID da Imagem || Nome da Imagem>
  Exibe todas as últimas camadas (commits/atualizações) na imagem
  É uma alternativa ao Dockerfile
  É uma forma mais simples de se criar imagens, mas não tão recomendada,
  pois não é automatizada, não permite um bom versionamento e não possui
  um bom sistema de commits, pois para que cada ação tenha um commit,
  você precisa dar um build na imagem a cada alteração
  Também é melhor "documentado", já que ele por si só explica como
  a imagem foi criada

docker login